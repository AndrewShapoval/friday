{"version":3,"sources":["serviceWorker.ts","n1-main/m1-ui/Main/header/Header.tsx","n1-main/m1-ui/Main/header/Routes/Routes.tsx","n1-main/m1-ui/Main/Main.tsx","n1-main/m1-ui/App.tsx","n1-main/m2-bll/loginReducer.ts","n1-main/m2-bll/registrationReducer.ts","n1-main/m2-bll/profileReducer.ts","n1-main/m2-bll/passwordRecoveryReducer.ts","n1-main/m2-bll/enteringNewPasswordReducer.ts","n1-main/m2-bll/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","Header","Routes","Main","App","className","initialState","rootReducer","combineReducers","login","state","registration","passwordRecovery","enteringNewPassword","profile","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","unregister","catch","error","console","message"],"mappings":"gOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,UChBOC,EAAS,WAClB,OACI,oMCFKC,EAAS,WAClB,OACI,+BCAKC,EAAO,WAChB,OACI,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,QCJCC,EAAM,WACjB,OACE,yBAAKC,UAAU,OACX,kBAAC,EAAD,Q,sCCPFC,EAAe,GCAfA,EAAe,GCAfA,EAAe,GCAfA,EAAe,GCAfA,EAAe,GCQfC,EAAcC,YAAgB,CAChCC,MLLwB,WAAwC,IAAvCC,EAAsC,uDAA9BJ,EACzB,OAAO,eAAII,IKKnBC,aJN+B,WAAwC,IAAvCD,EAAsC,uDAA9BJ,EAChC,OAAO,eAAII,IIMnBE,iBFPmC,WAA6C,IAA5CF,EAA2C,uDAAnCJ,EAC5C,OAAO,eAAII,IEOXG,oBDRsC,WAA6C,IAA5CH,EAA2C,uDAAnCJ,EAC/C,OAAO,eAAII,ICQXI,QHT0B,WAA6C,IAA5CJ,EAA2C,uDAAnCJ,EACnC,OAAO,eAAII,MGYFK,EAAQC,YAAYT,EAAaU,YAAgBC,MAK9DrB,OAAOkB,MAAQA,ECbfI,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUN,MAAOA,GACb,kBAAC,EAAD,SAIZO,SAASC,eAAe,SX0HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAhB,GACJA,EAAaiB,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ff89b4fd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <div>\r\n            Проект на миллион готов к сдаче!\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport const Routes = () => {\r\n    return (\r\n        <div>\r\n\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Header} from \"./header/Header\";\r\nimport {Routes} from \"./header/Routes/Routes\";\r\n\r\nexport const Main = () => {\r\n    return (\r\n        <div>\r\n            <Header/>\r\n            <Routes/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport {Main} from \"./Main/Main\";\n\nexport const App = () => {\n  return (\n    <div className=\"App\">\n        <Main/>\n    </div>\n  );\n}\n\n","const initialState = {\r\n\r\n}\r\n\r\nexport const loginReducer = (state = initialState, action: any) => {\r\n            return {...state}\r\n\r\n}\r\n\r\n// type InitialStateType = any","const initialState = {\r\n\r\n}\r\n\r\nexport const registrationReducer = (state = initialState, action: any) => {\r\n            return {...state}\r\n}\r\n\r\n// type InitialStateType = any","const initialState = {\r\n\r\n}\r\n\r\nexport const profileReducer = (state = initialState, action: any): any => {\r\n    return {...state}\r\n}\r\n\r\n// type InitialStateType = any\r\n\r\n","const initialState = {\r\n\r\n}\r\n\r\nexport const passwordRecoveryReducer = (state = initialState, action: any): any => {\r\n    return {...state}\r\n}\r\n\r\n// type InitialStateType = any","const initialState = {\r\n\r\n}\r\n\r\nexport const enteringNewPasswordReducer = (state = initialState, action: any): any => {\r\n    return {...state}\r\n}\r\n\r\n// type InitialStateType = any","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport {loginReducer} from \"./loginReducer\";\r\nimport {registrationReducer} from \"./registrationReducer\";\r\nimport {profileReducer} from \"./profileReducer\";\r\nimport {passwordRecoveryReducer} from \"./passwordRecoveryReducer\";\r\nimport {enteringNewPasswordReducer} from \"./enteringNewPasswordReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    login: loginReducer,\r\n    registration: registrationReducer,\r\n    passwordRecovery: passwordRecoveryReducer,\r\n    enteringNewPassword: enteringNewPasswordReducer,\r\n    profile: profileReducer\r\n\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n//@ts-ignore\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {App} from \"./n1-main/m1-ui/App\";\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./n1-main/m2-bll/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}